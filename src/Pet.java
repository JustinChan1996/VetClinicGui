/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Justin Chan B1302328
 */

/* To do list */
/**/

import java.io.Serializable;
import java.util.*;
import java.text.*;
/**
 * The pet class stores the attributes of each pet that has been registered with veterinary clinic. 
 * It is an abstract class which has a generalization- specialization relationship with a sub class which is identified by 
 * the type of pet. The information which is required to initialize a pet object of are the name of pet, the petID , the weight of the pet(in kg), 
 * and the Date of birth of the pet in Day/Month/Year format. The petID will be given by the system whenever to each new pet that
 * registers with the system while the accumulated Dose of drugs(in miligrams) administered to each pet will be updated whenever a dose of drugs is taken during a
 * consultation. The abstract method which will be implemented in the pet class is the getDose method which calculates the drug dose taken by
 * each pet based on the type of pet it belongs to.
 * 
 * 
*/
abstract public class Pet implements Comparable<Pet>, Serializable  {

    /* Define attributes */
    /* petId generated by the system */
    private int petID;
    /* Name of the pet */
    private String name;
    /* Weight of the pet in kilograms */
    private double weight;
    /* Date of birth of the pet */
    private Date dob;
    /* Accumulated dose of drugs administered to the pet */
    private double accumulatedDose;
    /* Collection of dose objects */
    private ArrayList<Dose> doses = new ArrayList<Dose>();
    /* Static variable for id counter */
    private static int IdCounter = 0;
    
    
    /**
     * Constructor without arguments 
     */
    public Pet()
    {
        this.setPetID();
    }
    
    /**
     * Constructor with arguments 
     * @param petID auto generated petID
     * @param name name of the pet
     * @param weight weight of the pet in kilograms
     * @param dob date of birth of the pet 
     */
    public Pet(int petID, String name, double weight, Date dob)
    {
        this.setName(name);
        this.setPetID();
        this.setWeight(weight);
        this.setDob(dob);
    }

    /**
     * Return the pet ID of the pet
     * @return the petID of the pet
     */
    public int getPetID() {
        return petID;
    }

    /**
     * Set the petID of the pet
     * @param petID the petID of the pet
     */
    private void setPetID() {
        /* Increment the Id counter by one */
        setIdCounter(IdCounter);
        /* Set the petId as the updated petId */
        this.petID = getIdCounter();
    }

    /**
     * Return the name of the pet
     * @return the name of the pet
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name of the pet
     * @param name the name of the pet
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Return the weight of the pet in kilograms
     * @return the weight of the pet in kilograms
     */
    public double getWeight() {
        return weight;
    }

    /**
     * Set the weight of the pet in kilograms
     * @param weight the weight of the pet in kilograms
     */
    public void setWeight(double weight) {
        this.weight = weight;
    }

    /**
     * Return the date of birth of the pet
     * @return the date of birth of the pet 
     */
    public Date getDob() {
        return dob;         
    }

    /**
     * Set the date of birth of the pet
     * @param dob Set the date of birth of the pet
     */
    public void setDob(Date dob) {
        this.dob = dob;
    }

    /**
     * Return the accumulated dose of drugs administered in miligrams for the pet
     * @return the accumulated dose of drugs administered in miligrams for the pet
     */
    public double getAccumulatedDose() {
        return accumulatedDose;
    }
    
    /**
     *  Set the accumulated dose of drugs administered to the pet
     * @param dose Dose class of the pet object
     */
    private void setAccumulatedDose(Dose dose) 
    {
        this.accumulatedDose = this.accumulatedDose + dose.getDoseInGrams();
    }
    
        /**
         * Set the dose collection of the pet
     * @param doses Collection of Dose objects
     * 
     */
    public void setDoses(ArrayList<Dose> doses)
    {
        this.doses = doses;
    }
    
    /**
     *Add a dose object to the collection 
     * @param dose Dose object
     */
    public void addDoses(Dose dose)
    {
        this.getDoses().add(dose);
        /* Update the accumulatedDose attribute whenever a dose object is added to the pet object */
        this.setAccumulatedDose(dose);
    }
    
        /**
         * return the arraylist of the dose objects in the pet class.
     * @return the arraylist of the dose objects in the pet class.
     */
    public ArrayList<Dose> getDoses() {
        return doses;
    }
    
    /**
     * @return the IdCounter
     */
    public static int getIdCounter() {
        return IdCounter;
    }

    /**
     * @param aIdCounter the IdCounter to set
     */
    public static void setIdCounter(int aIdCounter) {
        IdCounter = aIdCounter + 1;
    }
    
    /**
     * Find the age of the pet in number of months
     * @return the age of the pet in number of months
     */
    public int findAge()
    {
        /* Use SimpleDateFormat class to parse the date object to its parts which are year,month and day */
        SimpleDateFormat year = new SimpleDateFormat("yyyy");
        SimpleDateFormat month = new SimpleDateFormat("MM");
        /* Parse the current date to Year, month and day */
        Date now = new Date();
        int intCurrentYear = Integer.parseInt(year.format(now));
        int intCurrentMonth = Integer.parseInt(month.format(now));
        /* Parse the birth date to Year, month and day */
        int intBirthYear = Integer.parseInt(year.format(this.getDob()));
        int intBirthMonth = Integer.parseInt(month.format(this.getDob()));;
        /* calculate the months interval in months */
        int AgeDifference = 0;
	if (intCurrentYear == intBirthYear)
	{
		AgeDifference = intCurrentMonth - intBirthMonth;
	}
	else if (intCurrentYear > intBirthYear)
	{
		/* Find the year difference first */
		AgeDifference = (intCurrentYear - intBirthYear - 1) * 12;
		/* Find the difference between the birth month and the last month */
		AgeDifference = AgeDifference + (12 - intBirthMonth);
		/* Then, find the month interval from the begining of the year to now */
		AgeDifference = AgeDifference + (intCurrentMonth);
		
	}
	return AgeDifference;
    }
    
    /**
      *
      * Abstract method to calculate drug dosage for a certain animal 
      */
    abstract double getDose();
    
    /** 
     * Compare the pet objects by the accumulated dose of drugs administered
     * @param obj the Pet object to compare with
     * @return the order by comparing the accumulatedDose attribute
     */
    public int compareTo(Pet obj)
    {
        int dose1 = (int) this.getAccumulatedDose();
        int dose2 = (int) obj.getAccumulatedDose();
        return dose1 - dose2;
    }
    

}
