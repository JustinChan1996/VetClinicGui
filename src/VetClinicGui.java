
import java.awt.Rectangle;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Justin
 */
public class VetClinicGui extends javax.swing.JFrame {
    
    /* Attribute section */
    /* declare vetclinic object to hold all the pet objects */
    VetClinic clinic = new VetClinic();
    /* End of attribute section */
    
    /* Declate VetClinictableModel object to present table holding pet objects */
    VetClinicTableModel model = new VetClinicTableModel(clinic);
    /* Name of database file */
    private String databaseFileName = null;
    
    /**
     * Creates new form VetClinicGui
     */
    
    public VetClinicGui() 
    {
        initComponents();
        /* assign tableModel to jtable */
        VetClinicTable.setModel(model);
        System.out.println(clinic);
        /* Add ListSelectionListener to set the pet id box to the pet id of the selected pet in  the Jtable */
        VetClinicTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() 
        {
            public void valueChanged(ListSelectionEvent event) 
            {
                if (VetClinicTable.getSelectedRow() > -1) 
                {
                    // print first column value from selected row
                    txtPetId.setText(Integer.toString(VetClinicTable.getSelectedRow() + 1));
                }
            }
        });
        /* enable sorting for the Jtable */
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(VetClinicTable.getModel())
        {
            public boolean isSortable(int column) 
            {
                if ((column == 0) || (column == 2) || (column == 6) || (column == 7))
                    return true;
                else 
                    return false;
            };
        };

    }
    
  
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jDialog1 = new javax.swing.JDialog();
        panel1 = new java.awt.Panel();
        jMenu1 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblFileName = new javax.swing.JLabel();
        lblConfigStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        VetClinicTable = new javax.swing.JTable();
        btnRemovePet = new javax.swing.JButton();
        btnAddNewPet = new javax.swing.JButton();
        btnAdministerDossage = new javax.swing.JButton();
        btnEditPetDetails = new javax.swing.JButton();
        btnChangeSortingCriteria = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPetId = new javax.swing.JTextField();
        btnSearchPet = new javax.swing.JButton();
        btnsetClinicName = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        menuNewDatabase = new javax.swing.JMenuItem();
        menuLoadDatabase = new javax.swing.JMenuItem();
        menuSaveFile = new javax.swing.JMenuItem();
        menuSaveAs = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenuItem();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vet Clinic Managment Interface 1.0 by Justin Chan Kean Young");
        setBounds(new java.awt.Rectangle(20, 20, 0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        jPanel1.setLayout(new java.awt.GridLayout(0, 1));

        jPanel2.setToolTipText("Vet Clinic management Interface version 1.0");

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setName("Idenficationbox"); // NOI18N
        jPanel3.setLayout(new java.awt.GridLayout(0, 1));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Vet Clinic Managment Interface version 1.0");
        jPanel3.add(jLabel3);

        lblFileName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFileName.setText("No file Selected");
        jPanel3.add(lblFileName);

        lblConfigStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConfigStatus.setText("No database file loaded");
        lblConfigStatus.setToolTipText("");
        jPanel3.add(lblConfigStatus);

        VetClinicTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(VetClinicTable);
        if (VetClinicTable.getColumnModel().getColumnCount() > 0) {
            VetClinicTable.getColumnModel().getColumn(0).setHeaderValue("Title 1");
            VetClinicTable.getColumnModel().getColumn(1).setHeaderValue("Title 2");
            VetClinicTable.getColumnModel().getColumn(2).setHeaderValue("Title 3");
            VetClinicTable.getColumnModel().getColumn(3).setHeaderValue("Title 4");
        }

        btnRemovePet.setText("Remove Pet");
        btnRemovePet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePetActionPerformed(evt);
            }
        });

        btnAddNewPet.setText("Add new Pet");
        btnAddNewPet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddNewPetMouseClicked(evt);
            }
        });

        btnAdministerDossage.setText("Administer dosage to pet");
        btnAdministerDossage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAdministerDossageMouseClicked(evt);
            }
        });

        btnEditPetDetails.setText("Edit Pet Details");
        btnEditPetDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditPetDetailsMouseClicked(evt);
            }
        });

        btnChangeSortingCriteria.setText("Change sorting criteria");

        btnExit.setText("Exit");
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });

        jLabel2.setText("Pet Id selected:");

        btnSearchPet.setText("Search Pet");
        btnSearchPet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchPetMouseClicked(evt);
            }
        });

        btnsetClinicName.setText("Set Clinic name");
        btnsetClinicName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnsetClinicNameMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 856, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPetId, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearchPet)
                                .addGap(18, 18, 18)
                                .addComponent(btnsetClinicName))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnAddNewPet, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemovePet, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(btnEditPetDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAdministerDossage)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnChangeSortingCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnsetClinicName)
                    .addComponent(btnSearchPet)
                    .addComponent(txtPetId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditPetDetails)
                    .addComponent(btnAdministerDossage)
                    .addComponent(btnChangeSortingCriteria)
                    .addComponent(btnRemovePet)
                    .addComponent(btnAddNewPet))
                .addGap(18, 18, 18)
                .addComponent(btnExit)
                .addGap(36, 36, 36))
        );

        jPanel3.getAccessibleContext().setAccessibleName("");

        jPanel1.add(jPanel2);

        getContentPane().add(jPanel1);

        jMenu2.setText("File");

        menuNewDatabase.setText("New Database");
        menuNewDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewDatabaseActionPerformed(evt);
            }
        });
        jMenu2.add(menuNewDatabase);

        menuLoadDatabase.setText("Load Database file");
        menuLoadDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLoadDatabaseActionPerformed(evt);
            }
        });
        jMenu2.add(menuLoadDatabase);

        menuSaveFile.setText("Save file");
        menuSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveFileActionPerformed(evt);
            }
        });
        jMenu2.add(menuSaveFile);

        menuSaveAs.setText("Save as");
        menuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveAsActionPerformed(evt);
            }
        });
        jMenu2.add(menuSaveAs);

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu2.add(menuExit);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("About");

        menuAbout.setText("About");
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        jMenu3.add(menuAbout);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseClicked
        // Exit the program
        this.quitProgram();
    }//GEN-LAST:event_btnExitMouseClicked

    private void btnAddNewPetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddNewPetMouseClicked
        // Prompt the user to register new pet details
        this.addPet();
    }//GEN-LAST:event_btnAddNewPetMouseClicked

    private void btnsetClinicNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnsetClinicNameMouseClicked
        // Set the name of the VetClinic name attribute
        this.setClinicName();
    }//GEN-LAST:event_btnsetClinicNameMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // Update the clinic description every time the control returns to the main window
        lblConfigStatus.setText(clinic.toString());
    }//GEN-LAST:event_formWindowActivated

    private void btnSearchPetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchPetMouseClicked
        // Check if the pet id exists in the colection and hightlight the row with the pet id
        this.searchPet();
    }//GEN-LAST:event_btnSearchPetMouseClicked

    private void btnRemovePetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePetActionPerformed
        // Remove pet which is selected by the user in the Jtable
        this.removePet();
    }//GEN-LAST:event_btnRemovePetActionPerformed

    private void btnAdministerDossageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAdministerDossageMouseClicked
        // Display all the drug doses administered to the pet and record the new dosage 
        this.administerDrug();
    }//GEN-LAST:event_btnAdministerDossageMouseClicked

    private void btnEditPetDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditPetDetailsMouseClicked
        // Display window to edit pet's details
        this.editPet();
    }//GEN-LAST:event_btnEditPetDetailsMouseClicked

    private void menuLoadDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLoadDatabaseActionPerformed
        // Prompt the user for database file and load the file to system
        this.setFile();
        
    }//GEN-LAST:event_menuLoadDatabaseActionPerformed

    private void menuSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveFileActionPerformed
        // Save the database to the file specified by the user
        this.saveFile(databaseFileName);
    }//GEN-LAST:event_menuSaveFileActionPerformed

    private void menuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveAsActionPerformed
        // Assign file to save database
        this.selectFileToSave();
    }//GEN-LAST:event_menuSaveAsActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        // Exits the application 
        this.quitProgram();
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        // Display program and author information
        JOptionPane.showMessageDialog(null, " VetClinic Console Managment System by Justin Chan for BIT203 Assignment 2 \n Copyright Justin Chan 2016");
    }//GEN-LAST:event_menuAboutActionPerformed

    private void menuNewDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewDatabaseActionPerformed
        // Resets the array and filename
        this.newDatabase();
    }//GEN-LAST:event_menuNewDatabaseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VetClinicGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VetClinicGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VetClinicGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VetClinicGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VetClinicGui().setVisible(true);
            }
        });
        
    }
    
    /**
     * Get the name of the database file
     * @return the databaseFileName
     */
    public String getDatabaseFileName() {
        return databaseFileName;
    }

    /**
     * Set the name of the database file 
     * @param databaseFileName the databaseFileName to set
     */
    public void setDatabaseFileName(String databaseFileName)
    {
        this.databaseFileName = databaseFileName;
        // Update the file selected label
        lblFileName.setText(databaseFileName);
    }
    
    /**
     * Method to select pet object database file
     */
    public void setFile()
    {
        /* Open filechooser dialog when user clicks on the button */
        /* create JFileChooser object */
        JFileChooser fileChooser = new JFileChooser();
        /* pop up JFileChooser dialog window */
        int returnValue = fileChooser.showDialog(btnExit, null);
        /* read the file selected if the user selects a file */
        if(returnValue == JFileChooser.APPROVE_OPTION)
        {
            /* Assign file to user's selection */
            String filename =  fileChooser.getSelectedFile().getName();
            /* DEBUGGING ONLY: Change label to filename */
            lblConfigStatus.setText(filename);
            //Use serializer to read file contents to memory
            clinic = readVetClinic(filename);
            /* Populate the jtable with the pet information */
            model.setClinic(clinic);
            model.fireTableDataChanged();
            /* Set name of the database file */
            this.setDatabaseFileName(filename);
        }
        
    }
    
    /**
     * Method to create pet object using a dialog box and add it to the collection.
     */
    public void addPet()
    {
        /* Displays AddNewPet dialog box when clicked */
        /* create AddNewPet object first */
        AddNewPet window = new AddNewPet(this, true);
        /* set the dialog visibility to visible */
        window.setVisible(true);
        /* After jdialog is disposed, get the pet subclass created in the dialog if the user clicks on the register pet button */
        if(window.getButton() == 1)
        {
            Pet newPet = window.getPet();
            /* Add the pet to the collection  */
            /* clinic.getPets().add(newPet); */
            /* Update table display */
            model.add(newPet);
        }
        
    }
    
    /**
     * Method to read the VetClinic object from file and assign it to the object specified.
     */
    public static VetClinic readVetClinic(String filename)
    {
        
        FileInputStream file = null;
        VetClinic vetClinic = null;
        try
        {
            file = new FileInputStream(filename);
            ObjectInputStream readVetClinic = new ObjectInputStream(file);
            /* read VetClinic object from file */
            vetClinic = (VetClinic) readVetClinic.readObject();
            /* close object input stream */
            readVetClinic.close();
            
        }
        catch(Exception e)
        {
             JOptionPane.showMessageDialog(null, e.getMessage());
        }
        finally
        {
            /* close file input stream */
            try
            {
                if (file != null)
                    file.close();
            }
            catch(Exception e)
            {
                 JOptionPane.showMessageDialog(null, e.getMessage());       
            }
            
        }
        return vetClinic;
    }
    
    /**
     * Method to invoke the dialog box to set the name of the clinic
     */
    public void setClinicName()
    {
        setClinicName window = new setClinicName(null, true);
        /* Set the name text field to the existing name */
        window.setName(clinic.getName());
        window.setVisible(true);
        /* get name from dialog box and set the clinic's name */
        /* Set the clinic name if user clicks on the confirm button */
        if (window.getButton() == 1)
        {
            clinic.setName(window.getName());
        }
    }
    
    /**
     * Method to check if the pet id exists in the collection and highlight the row with the pet id
     */
    public void searchPet()
    {
        // Get value from textbox
        try
        {
            int PetId = Integer.parseInt(txtPetId.getText());
            // If no exception, check if any object has the PetId
            // the Pet Id must be above 0
            if ((PetId <= clinic.getPets().size()) && (PetId > 0))
            {
                // If pet exist, highlight the row with the pet id
                Rectangle r = VetClinicTable.getCellRect(PetId, 0, true);
                VetClinicTable.scrollRectToVisible(r);
            }
            else
            {
                //display error message if no pets have the pet id
                JOptionPane.showMessageDialog(null, "Pet with pet id " + PetId + " is not found in the system");
                /* reset Pet Id textbox */
                txtPetId.setText("");
            }
        }
        catch(NumberFormatException e)
        {
            // Display error message if input value is non numeric 
            JOptionPane.showMessageDialog(null, "Input value must be numeric only");
        }
        
    }
    
    /**
     * Method to remove pet selected by user in the jtable
     */
    public void removePet()
    {
        /* Check if pet id exists in the system */;
        if(isPetIdValid()== true)
        {
            /* find row of Jtable with the pet Id */
            int row = (Integer.parseInt(txtPetId.getText())) - 1;
            /* pop up a confirmation box displaying pet detail and confirm with user to delete the pet object */
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int option = JOptionPane.showConfirmDialog(null, "Confirm Deleting this pet ? \n \n " + clinic.getPets().get(row), "Delete pet", dialogButton);
            /* Delete the pet if the user selects the yes option */
            if(option == JOptionPane.YES_OPTION)
            {
                /* Remove the pet from the collection */
                model.remove(row);
            }
        }

    }
    
    /**
     * Method to display all the drug dosage taken by the pet and record new dosage
     */
    public void administerDrug()
    {
        /* check if pet id is valid */
        if(isPetIdValid() == true)
        {
            /* if valid, create a the jdialog object and pass the pet object as a parameter */
             AddPetDose window = new AddPetDose(null, true);
            /* find pet object based on pet id */
            Pet pet = clinic.getPets().get(Integer.parseInt(txtPetId.getText()) - 1);
            window.setPet(pet);
            window.setVisible(true);
            /* update the dose arraylist of the pet object */
            model.fireTableStructureChanged();
        }
 
        
    }
    
    /**
     * Method to check if pet id exists in the collection *
     * @return the validity of the petid
     */
    public boolean isPetIdValid()
    {
	boolean flag = true;
	if(txtPetId.getText().equals(""))
	{
		/* Display error message if no pet id is selected */
		JOptionPane.showMessageDialog(null, "No Pet id selected");
		/* set the valid flag to false */
		flag = false;

	}
	else
	{
            try
            {
                /* find the row of the table that corresponds to the petId */
                int row = (Integer.parseInt(txtPetId.getText())) - 1;
                /* check if it exist in the collection */
                if((row >= 0) && (row < clinic.getPets().size()))
                {
                        /* if pet id exist, set the flag to true */
                        flag = true;
                }
                else
                {
                        /* if pet id does not exist, display error message */
                        JOptionPane.showMessageDialog(null, "Pet Id does not exist.");
                        flag = false;
                }

            }
            catch(NumberFormatException e)
            {
                /* If non numeric characters are found, display error message */
                JOptionPane.showMessageDialog(null, "Pet Id box can only contain numeric characters");
                flag = false;
            }   
        }
        return flag;
    }
    
    /**
     * Method to open up a window to edit pet's attributes
     */
    public void editPet()
    {
        if(isPetIdValid() == true)
        {
            /* get pet object */
            Pet pet = clinic.getPets().get(Integer.parseInt(txtPetId.getText()) - 1);
            /* create new EditPetInfo window */
            EditPetInfo window = new EditPetInfo(null, true);
            /* set the pet object attributes in the window */
            window.setPet(pet);
            window.setVisible(true);
            /* Set attribute of pet based on type  if the user clicks on  the confirm button before the input window is disposed */
            if(window.getBtnflag() == 0)
            {
                pet.setName(window.getName());
                pet.setWeight(window.getWeight());
                    if(pet instanceof Dog)
                    {
                        ((Dog) pet).setBreed(window.getBreed());
                    }
                    else
                    {
                        ((Cat) pet).setAllergic(window.isAllergic());
                    }
                    model.fireTableStructureChanged();
            }
            
        }
    }
    
    public void saveVetClinic(String fileName) throws FileNotFoundException, IOException
    {
        // Demonstration of the serializer for the VetClinic class 
        FileOutputStream outputFile= null;
        try
        {
            outputFile = new FileOutputStream(fileName);
            ObjectOutputStream objectOutput = new ObjectOutputStream(outputFile);
            // write VetClinic object to file 
            objectOutput.writeObject(clinic);
            objectOutput.flush();
            objectOutput.close();
            JOptionPane.showMessageDialog(null, "File " + fileName + " successfully saved ");
            // Set name of save file
            this.setDatabaseFileName(fileName);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
                
    }
    
    /**
     *Method to open a fileChooser dialog to let the user select file to save the database
     */
    public void selectFileToSave()
    {
        // Create new FileChooser object 
        JFileChooser filechooser = new JFileChooser();
        // Open filechooser window
        int returnValue = filechooser.showSaveDialog(btnExit);
        if(returnValue == JFileChooser.APPROVE_OPTION)
        {
            // if the user wants to save the file, get the filename from the user
            String fileName = filechooser.getSelectedFile().getName();
            // Save VetClinic object to file 
            this.saveFile(fileName);
        }
        
    }
    
    /**
     *Write the VetClinic object to the file specified by the user
     * @param fileName fileName selected by the user
     */
    public void saveFile(String fileName)
    {
        // Write VetClinic object to file if the databaseFileName attribute is not null
        if(fileName != null)
        {
            try 
            {
                // Test serializer for VetClinic class
                this.saveVetClinic(fileName);
            } 
            catch (IOException e) 
            {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
        else
        {
            // if no file is selected, prompt user to select file to save
            this.selectFileToSave();
        }
    }
    
    /**
     * Method to save file or prompt user to select save file before the program is terminated
     */
    public void quitProgram()
    {
	// Check if there is any save file
	if(this.getDatabaseFileName() != null)
	{
		// if save file exists, save the file before exiting
		this.saveFile(this.getDatabaseFileName());
	}
	else
	{
		// if no save file, prompt user to select file to save
                int dialogButton = JOptionPane.YES_NO_OPTION;
		int option = JOptionPane.showConfirmDialog(null, "Save changes before exiting ?", "Confirm save file ? ", dialogButton);
		if(option == JOptionPane.YES_OPTION)
		{
			// if user wants to save changes, display fileChooser to save file
			this.selectFileToSave(); 
		}
		
	}
	// Quits the application
	System.exit(0);
    }
        
    /**
     * Resets database and filename
     */
    public void newDatabase()
    {
        // Resets filename
        this.setDatabaseFileName(null);
        lblFileName.setText("No file selected");
        // Reset description
        lblConfigStatus.setText("No database file loaded");
        // Reset table
        model.reset();
        model.fireTableDataChanged();
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable VetClinicTable;
    private javax.swing.JButton btnAddNewPet;
    private javax.swing.JButton btnAdministerDossage;
    private javax.swing.JButton btnChangeSortingCriteria;
    private javax.swing.JButton btnEditPetDetails;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRemovePet;
    private javax.swing.JButton btnSearchPet;
    private javax.swing.JButton btnsetClinicName;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblConfigStatus;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuLoadDatabase;
    private javax.swing.JMenuItem menuNewDatabase;
    private javax.swing.JMenuItem menuSaveAs;
    private javax.swing.JMenuItem menuSaveFile;
    private java.awt.Panel panel1;
    private javax.swing.JTextField txtPetId;
    // End of variables declaration//GEN-END:variables

    
}
